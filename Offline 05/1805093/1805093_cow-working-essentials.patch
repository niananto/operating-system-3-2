diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..27af922 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             krefcnt(void*);
+int             kaddrefcnt(void*);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -147,6 +149,8 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             cowpage(pagetable_t, uint64);
+void*           cowalloc(pagetable_t, uint64);
 
 // uart.c
 void            uartinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..9472dfe 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,10 +23,22 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct {
+  struct spinlock lock;
+  int cnt [PHYSTOP / PGSIZE]; // should I use (PHYSTOP-KERNBASE) / PGSIZE?
+} ref;
+
+int
+krefcnt(void* pa)
+{
+  return ref.cnt[(uint64)pa / PGSIZE]; // should I use ((uint64)pa - KERNBASE) / PGSIZE?
+}
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&ref.lock, "ref");
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -35,8 +47,10 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    ref.cnt[(uint64)p / PGSIZE] = 1; // should I use ((uint64)p - KERNBASE) / PGSIZE?
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -51,15 +65,25 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
+  acquire(&ref.lock);
+  --ref.cnt[(uint64)pa / PGSIZE]; // should I use ((uint64)pa - KERNBASE) / PGSIZE?
 
-  r = (struct run*)pa;
+  if(ref.cnt[(uint64)pa / PGSIZE] == 0){
+    release(&ref.lock);
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+    // Fill with junk to catch dangling refs.
+    memset(pa, 1, PGSIZE);
+
+    r = (struct run*)pa;
+
+    acquire(&kmem.lock);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    release(&kmem.lock);
+
+  } else {
+    release(&ref.lock);
+  }
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -72,11 +96,31 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r) {
     kmem.freelist = r->next;
+    
+    acquire(&ref.lock);
+    ref.cnt[(uint64)r / PGSIZE] = 1; // should I use ((uint64)r - KERNBASE) / PGSIZE?
+    // should I use ++ or =1?
+    release(&ref.lock);
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+// when do I call this method?
+// uvm copy I guess
+int
+kaddrefcnt(void* pa)
+{
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    return -1;
+
+  acquire(&ref.lock);
+  ++ref.cnt[(uint64)pa / PGSIZE]; // should I use ((uint64)pa - KERNBASE) / PGSIZE?
+  release(&ref.lock);
+  return 0;
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..48c36fb 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_COW (1L << 8) // copy-on-write
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..fbd05f7 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -29,6 +29,53 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+// helper cow methods to be used in usertrap()
+int
+cowpage(pagetable_t pagetable, uint64 va)
+{
+  if(va >= MAXVA) return -1;
+  pte_t *pte = walk(pagetable, va, 0);
+  if(pte == 0) return -1;
+  if((*pte & PTE_V) == 0) return -1;
+  return (*pte & PTE_COW) ? 0 : -1;
+}
+
+
+// I don't clearly understand what this method is doing
+void*
+cowalloc(pagetable_t pagetable, uint64 va)
+{
+  if(va % PGSIZE != 0) return 0;
+
+  uint64 pa = walkaddr(pagetable, va);
+  if(pa == 0) return 0;
+
+  pte_t *pte = walk(pagetable, va, 0);
+  if(krefcnt((char *)pa) == 1){
+    *pte |= PTE_W;
+    *pte &= ~PTE_COW;
+    return (void *)pa;
+  
+  } else {
+    char *mem;
+    if((mem = kalloc()) == 0)
+      return 0;
+
+    memmove(mem, (char*)pa, PGSIZE);
+    *pte &= ~PTE_V;
+
+    if(mappages(pagetable, va, PGSIZE, 
+            (uint64)mem, (PTE_FLAGS(*pte) | PTE_W) & ~PTE_COW) != 0){
+      kfree(mem);
+      *pte |= PTE_V;
+      return 0;
+    }
+
+    kfree((char *)PGROUNDDOWN(pa));
+    return mem;
+  }
+}
+
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -65,8 +112,22 @@ usertrap(void)
     intr_on();
 
     syscall();
+
   } else if((which_dev = devintr()) != 0){
     // ok
+
+  // 12: page fault caused by an instruction fetch
+  // 13: page fault caused by a read
+  // 15: page fault cause by a write
+  } else if(r_scause() == 13 || r_scause() == 15){
+
+    uint64 fault_va = PGROUNDDOWN(r_stval());
+    if(fault_va >= p->sz
+      || cowpage(p->pagetable, fault_va) != 0
+      || cowalloc(p->pagetable, PGROUNDDOWN(fault_va)) == 0){
+        setkilled(p);
+    }
+
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..60b06a6 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,7 +308,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -317,14 +317,27 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    //   kfree(mem);
+    //   goto err;
+    // }
+
+    if (flags & PTE_W) {
+      flags = (flags | PTE_COW) & ~PTE_W;
+      *pte = PA2PTE(pa) | flags; // does this make sure the old page is read-only?
+    }
+
+    if(mappages(new, i, PGSIZE, pa, flags) != 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    // add ref to the page
+    if(kaddrefcnt((void *)pa) < 0)
       goto err;
-    }
   }
+
   return 0;
 
  err:
@@ -348,6 +361,12 @@ uvmclear(pagetable_t pagetable, uint64 va)
 // Copy from kernel to user.
 // Copy len bytes from src to virtual address dstva in a given page table.
 // Return 0 on success, -1 on error.
+
+// only needs to be changed copyoutbut not copyinbecause the former is 
+// copied from the kernel to the user, which will generate a write 
+// operation on a user page, while the latter is copied from the user to 
+// the kernel, just to read the content of the user page, and the COW 
+// page is allowed to read.
 int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
@@ -356,6 +375,12 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
+
+    // if it is a COW page, replace the pa0 pointed phy addr
+    if(cowpage(pagetable, va0) == 0){
+      pa0 = (uint64)cowalloc(pagetable, va0);
+    }
+
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
